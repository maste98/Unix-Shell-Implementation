#include <stdio.h>
#include<unistd.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
int main(int argc, char *argv[]){
 char input[100];
 char path[]="/bin/";
 char str[200];
 FILE *fp;
 if(argc==2){
   // fp=fopen(argv[0], "r");;
    if ((fp = fopen(argv[1], "r")) == NULL)
    {
         printf("Error! opening file");
       // Program exits if file pointer returns NULL.
        exit(1);         
        }
       // fp=fopen(argv[0], "r");
       }  
  do{
    if(argc!=2){
printf("dash> ");
fgets(input, 100, stdin);
// input[strcspn( input, "\n" )] = '\0';
    }
    else if(argc==2){
      if(fgets(input, 100, fp)==NULL)
	exit(0);
      printf(input);


}
    input[strcspn( input, "\n" )] = '\0';
 char* token = strtok(input, " ");
 strcpy(str, path);
 strcat(str, token);
 int rc=fork();
 if(rc<0){  // fork failed
   printf("Error");
   return 0;
}
 else if(rc==0){//child process
     printf("\nhello, I am child (pid:%d)\n", (int) getpid());
   char *myargs[15];
   myargs[0]=token;
   int counter=0;
      while(myargs[counter] != NULL){
    counter++;
    myargs[counter]=strtok(NULL, " ");
      }
   execv(str,myargs );
   printf("failed");
}
 else{ //parent process

   wait(NULL);
      int rc_wait=wait(NULL);
    printf("hello, I am parent of %d (rc_wait:%d) (pid:%d)\n", rc, rc_wait, (int) getpid());
}

  }while(strcmp(input,"exit")!=0);
  return 0;
}
